# -*- coding: utf-8 -*-
"""Anime Recomendation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EoTV6HnIgNeWG8-XT0Xv2G-Rfsw1zlMy

# PREPARATION
  1. Download dataset
  2. Unzip dataset
"""

!pip install kaggle

import os
os.environ['KAGGLE_USERNAME'] = "luthfanhadihilsan" 
os.environ['KAGGLE_KEY'] = "40c524dbf7d7d256cd53e34126e5f256" 
!kaggle datasets download -d hernan4444/anime-recommendation-database-2020

print(os.listdir())
import zipfile,os
local_zip = '/content/anime-recommendation-database-2020.zip'
zip_ref = zipfile.ZipFile(local_zip, 'r')
zip_ref.extractall('/content/data')
zip_ref.close()

"""# LOAD DATA
  1. Explore data
  2. Data Filtering
"""

data_filtered = data_file[['MAL_ID','Name','Genres']]
print(data_filtered.head())
print(data_filtered.info())

print('DATA ISNULL\t : \n',data_filtered.isnull().sum())
print('DATA DUPLICATE\t : ',data_filtered.duplicated().sum())

import pandas as pd

data_file = pd.read_csv('data/anime.csv',dtype = 'object')
print(data_file.head())
print(data_file.info())

from sklearn.feature_extraction.text import TfidfVectorizer
 
# Inisialisasi TfidfVectorizer
tf = TfidfVectorizer()
 
# Melakukan perhitungan idf pada data cuisine
tf.fit(data_filtered['Genres']) 
 
# Mapping array dari fitur index integer ke fitur nama
genres = tf.get_feature_names() 

print(len(genres))

"""# PREDICTIVE MODEL
  1. Create tfidf matrix
  2. Convert vektor of tfidf
  3. Calculate cosine similarity on tfidf matrix
"""

tfidf_matrix = tf.fit_transform(data_filtered['Genres']) 
 
# Melihat ukuran matrix tfidf
tfidf_matrix.shape 

# Mengubah vektor tf-idf dalam bentuk matriks dengan fungsi todense()
tfidf_matrix.todense()

# Membuat dataframe untuk melihat tf-idf matrix
# Kolom diisi dengan jenis masakan
# Baris diisi dengan nama resto
 
pd.DataFrame(
    tfidf_matrix.todense(), 
    columns=tf.get_feature_names(),
    index=data_filtered.Name
).sample(22, axis=1).sample(10, axis=0)

from sklearn.metrics.pairwise import cosine_similarity
 
# Menghitung cosine similarity pada matrix tf-idf
cosine_sim = cosine_similarity(tfidf_matrix) 
print(cosine_sim)

cosine_sim_df = pd.DataFrame(cosine_sim, index=data_filtered['Name'], columns=data_filtered['Name'])
print('Shape:', cosine_sim_df.shape)
 
cosine_sim_df.sample(5, axis=1).sample(10, axis=0)

def anime_recommendations(nama_resto, similarity_data=cosine_sim_df, items=data_filtered[['Name', 'Genres']], k=5):
    """
    Rekomendasi Anime berdasarkan kemiripan dataframe
 
    Parameter:
    ---
    nama_resto : tipe data string (str)
                Nama Anime (index kemiripan dataframe)
    similarity_data : tipe data pd.DataFrame (object)
                      Kesamaan dataframe, simetrik, dengan resto sebagai 
                      indeks dan kolom
    items : tipe data pd.DataFrame (object)
            Mengandung kedua nama dan fitur lainnya yang digunakan untuk mendefinisikan kemiripan
    k : tipe data integer (int)
        Banyaknya jumlah rekomendasi yang diberikan
    ---
 
 
    Pada index ini, kita mengambil k dengan nilai similarity terbesar 
    pada index matrix yang diberikan (i).
    """
 
 
    # Mengambil data dengan menggunakan argpartition untuk melakukan partisi secara tidak langsung sepanjang sumbu yang diberikan    
    # Dataframe diubah menjadi numpy
    # Range(start, stop, step)
    index = similarity_data.loc[:,nama_resto].to_numpy().argpartition(
        range(-1, -k, -1))
    
    # Mengambil data dengan similarity terbesar dari index yang ada
    closest = similarity_data.columns[index[-1:-(k+2):-1]]
    
    # Drop nama_resto agar nama resto yang dicari tidak muncul dalam daftar rekomendasi
    closest = closest.drop(nama_resto, errors='ignore')
 
    return pd.DataFrame(closest).merge(items).head(k)

"""# EVALUATION
  1. Testing on 1 title of anime
"""

data_filtered[data_filtered.Name.eq('Taiko no Tatsujin')]

anime_recommendations('Taiko no Tatsujin',k=10)